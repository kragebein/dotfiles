#!/usr/bin/python3

# Generate complex passwords. Avoids similar characters next to eachother.

import string
import random

def check(password: str, char: str) -> None:
    '''Checks for same character in a row.'''
    for x in password:
        if password[:-1] + char in password[:-1]:
            return True
        return False

def genpass(special_chars: bool = True, length: int = 20) -> None:
    ''' Does the password generation, taking options in concideration '''
    char = string.ascii_letters + string.digits
    char = char + '@$!%?&Â¤#/()[]' if special_chars == True else char
    password = ''
    while len(password) <= length:
        try: 
            x = char[random.randint(0, len(char))]
            if check(password, x):
                x = char[random.randint(0, len(char))]
            password += x
        except:
            pass
    print(password)
def gen(chars: int, len: int, amount: int) -> None:
    '''gen is a wrapper for genpass to control how many passwords are generated.'''
    c = 0
    while c <= amount:
        genpass(special_chars=chars, length=len)
        c += 1

# gen(special characters on/off, number of characters, how many passwords to generate)
# Remember, counting starts at 0.
# gen(1, 12, 0) generates 1 password, for 13 characters and with special characters.
# gen(0, 49, 99) generates 100 passwords with 50 characters and without special characters.

gen(0, 10, 99)
